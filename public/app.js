// Generated by LiveScript 1.2.0
var init_isotope, controller, view;

function syntaxHighlight(json) {
    if (typeof json != 'string') {
         json = JSON.stringify(json, undefined, 2);
    }
    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
        var cls = 'number';
        if (/^"/.test(match)) {
            if (/:$/.test(match)) {
                cls = 'key';
            } else {
                cls = 'string';
            }
        } else if (/true|false/.test(match)) {
            cls = 'boolean';
        } else if (/null/.test(match)) {
            cls = 'null';
        }
        return '<span class="' + cls + '">' + match + '</span>';
    });
}

init_isotope = function(ele){};
controller = function(){
  var e, this$ = this;
  this.info = m.prop({
    counts: {},
    queues: []
  });
  this.jobs = m.prop([]);
  this.filter = (function(){
    try {
      return eval("(" + m.route.param('filter') + ")");
    } catch (e$) {
      e = e$;
      return {
        where: {}
      };
    }
  }());
  this.reload = function(){
    m.request.post('/info', {
      data: this$.filter
    }).then(this$.info);
    m.request.post('/view', {
      data: this$.filter
    }).then(function(it){
      var i$, len$, job, j$, ref$, len1$, log;
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        job = it[i$];
        job.timestamp = moment(job.timestamp).fromNow();
        if (job.logs) {
          for (j$ = 0, len1$ = (ref$ = job.logs).length; j$ < len1$; ++j$) {
            log = ref$[j$];
            log.t = moment(log.t).fromNow();
          }
        }
      }
      this$.jobs(it);
    });
  };
  this.reload();
  this.interval = setInterval(this.reload, 1000);
  this.onunload = function(){
    clearInterval(this$.interval);
  };
  this.changeWhere = function(_where){
    import$(this$.filter.where, _where);
    m.route("/" + JSON.stringify(this$.filter));
    return false;
  };
};
view = function(c){
  var job;
  return a(m('div', {
    init: init_isotope
  }, a(m('pre.info', a((function(){
    var i$, ref$, results$ = [];
    for (i$ in ref$ = c.info().counts) {
      results$.push((fn$.call(this, i$, ref$[i$])));
    }
    return results$;
    function fn$(state, count){
      return m('p', m('a', {
        'class': {
          active: state === c.filter.where.state
        },
        href: '#',
        onclick: function(){
          return c.changeWhere({
            state: state
          });
        }
      }, state + ": " + count));
    }
  }.call(this)), m('p', m('a', {
    'class': {
      active: void 8 === c.filter.where.state
    },
    href: '#',
    onclick: function(){
      return c.changeWhere({
        state: void 8
      });
    }
  }, "Any")))), m('pre.info', a((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = c.info().queues).length; i$ < len$; ++i$) {
      results$.push((fn$.call(this, ref$[i$])));
    }
    return results$;
    function fn$(queue){
      return m('p', m('a', {
        'class': {
          active: queue === c.filter.where.type
        },
        href: '#',
        onclick: function(){
          return c.changeWhere({
            type: queue
          });
        }
      }, queue + ""));
    }
  }.call(this)), m('p', m('a', {
    'class': {
      active: void 8 === c.filter.where.type
    },
    href: '#',
    onclick: function(){
      return c.changeWhere({
        type: void 8
      });
    }
  }, "Any")))), m('br', {
    style: 'clear:both'
  }), (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = c.jobs()).length; i$ < len$; ++i$) {
      job = ref$[i$];
      results$.push(m('pre.job', m.trust(syntaxHighlight(JSON.stringify(job, void 8, 1)))));
    }
    return results$;
  }()))));
};
m.route(document.getElementById('app'), '/{where:{state:"pending"}}', {
  '/:filter': {
    controller: controller,
    view: view
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}